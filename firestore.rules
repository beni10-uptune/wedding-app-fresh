rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Test collection - for debugging
    match /test-collection/{document} {
      allow read, write: if request.auth != null;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Users can create their own document with required fields
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.uid == userId;
      
      // Users can update their own document (except uid)
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.uid == resource.data.uid;
    }
    
    // Weddings collection
    match /weddings/{weddingId} {
      // Allow read if user is an owner
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.owners;
      
      // Allow create if user will be an owner
      allow create: if request.auth != null
        && request.auth.uid in request.resource.data.owners;
      
      // Allow update if user is an owner
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.owners;
      
      // Allow delete if user is an owner
      allow delete: if request.auth != null 
        && request.auth.uid in resource.data.owners;
      
      // Guest submissions subcollection
      match /guestSubmissions/{submissionId} {
        allow read: if request.auth != null;
        allow create: if true; // Allow anyone to submit
        allow update: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.owners;
      }
      
      // Guests subcollection
      match /guests/{guestId} {
        allow read, write: if request.auth != null;
      }
      
      // Playlists subcollection
      match /playlists/{playlistId} {
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.owners;
        allow create, update, delete: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.owners;
          
        // Songs within playlists
        match /songs/{songId} {
          allow read, write: if request.auth != null 
            && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.owners;
        }
      }
      
      // Invitations subcollection
      match /invitations/{invitationId} {
        allow read, write: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.owners;
      }
      
      // Suggestions subcollection
      match /suggestions/{suggestionId} {
        allow read: if true; // Public can read
        allow create: if true; // Public can create suggestions
        allow update, delete: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.owners;
      }
      
      // Votes subcollection
      match /votes/{voteId} {
        allow read, create: if true; // Public can read and vote
        allow update, delete: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/weddings/$(weddingId)).data.owners;
      }
    }
    
    // Invitations collection
    match /invitations/{invitationId} {
      // Anyone can read invitations (for code lookup)
      allow read: if true;
      
      // Only wedding owners can create invitations
      allow create: if request.auth != null;
      
      // Allow updates for accepting invitations
      allow update: if request.auth != null;
    }
    
    // Collaborators collection (if used)
    match /collaborators/{collaboratorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
}